package AlishevThread;



/* потоки нужны что бы распаралелить работу програм - одновременно выполнять множество паралельных задач
 так же примером может быть веб сервер который может обслуживать нное кол-во клиэнтов оновременно
 многопоточность позволяет нам выполнять какойто код паралельно с другими кодами
 многопоточность будет работать и на одноядерном компе и на двух - 4 - 8..... в Java многопот представленна в
 виде виртуальной паралельности... процесор выполняеть один кусок кода затем переключаеться на другой, третий
 возвращаеться опять выполнит кусок и так далее чем больше ядер тем легче и быстрее распределить задачи
 процесор может быстро переключаться между задачами что создает впечатление паралельной работе программ
 цель многопоточности сделать так что бы клиент не ждал, более сложные задачи обрабатывались за ширмой
 или в фоновом режиме...*/

public class TestFirstThread {

    public static void main(String[] args) throws  InterruptedException{ // main - это главный поток, только с него можем запускать потоки

        /*MyThread myThread = new MyThread();
               myThread.start(); метод run() только для внутреннего использования его не нужно запускать */
        // важно вызвать метод start() определен в классе Thread для старта потока, который уже будет юзать run()
        new MyThread().start();

        System.out.println("Hello from Main"); // потоки не синхронизированны, выполняються в любом порядке

        // вывод -> first -> 1-25, then second 0 - 8, then first -> 26, then second 9-77 ......

       // Thread.sleep(1000); // первый поток вырветься в лидеры перед вторым будет ещо задержка

        new MyThread().start(); // создали ещо один поток, потоки будет работать паралельно но не по порядку они не синхронизированны

// статический метод можем напрямую вызивать sleep() - задержка выполнения потока в мили секах + исключения
       /* System.out.println("I am going to sleep"); // I am going to sleep -> witing for 3000mil -> I am wake up
        Thread.sleep(3000);
        System.out.println("I am wake up"); */
    }

}

// первый способ создания потоков это создать клас и унаследоваться от Thread(потока)
// Thread лежит в пакете java.leng (лежат наиболее важные, базовые классы) доступен без импорта

class MyThread  extends Thread {

    public void run(){ // именно в run() мы описываем код который выполняем в потоке
    for(int i = 0; i<50; i++){
    try {
        Thread.sleep(1000); // задержка вывода на 1000милисек
    } catch (InterruptedException e) {

        e.printStackTrace();
    }

    System.out.println("Hello from MyThread " + i);
}
    }




}